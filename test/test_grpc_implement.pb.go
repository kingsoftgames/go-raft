// Code generated by protoc-gen-ppx. DO NOT EDIT.

package test

import (
	context "context"
	"time"

	app "git.shiyou.kingsoft.com/infra/go-raft/app"
)

// ImplementedTestServer  with app.
type ImplementedTestServer struct {
	UnimplementedTestServer
	app app.IApp
}

func (th *ImplementedTestServer) GetRequest(ctx context.Context, req *GetReq) (*GetRsp, error) {
	f := app.NewReplyFuture(context.WithValue(ctx, "hash", req.Header.Hash), req, &GetRsp{})
	th.app.GRpcHandle(f)
	if f.Error() != nil {
		return nil, f.Error()
	}
	return f.Response().(*GetRsp), nil
}
func (th *ImplementedTestServer) SetRequest(ctx context.Context, req *SetReq) (*SetRsp, error) {
	f := app.NewReplyFuture(context.WithValue(ctx, "hash", req.Header.Hash), req, &SetRsp{TimeLine: []*TimeLineUnit{}})
	f.Timeline = make([]app.TimelineInfo, 0)
	f.Timeline = append(f.Timeline, app.TimelineInfo{Tag: req.Timeline[0].Tag, T: req.Timeline[0].Timeline})
	f.AddTimeLine("Receive")
	th.app.GRpcHandle(f)
	if f.Error() != nil {
		return nil, f.Error()
	}
	rsp := f.Response().(*SetRsp)
	for _, timeline := range f.Timeline {
		rsp.TimeLine = append(rsp.TimeLine, &TimeLineUnit{
			Tag:      timeline.Tag,
			Timeline: timeline.T,
		})
	}
	rsp.TimeLine = append(rsp.TimeLine, &TimeLineUnit{
		Tag:      "ResultSend",
		Timeline: time.Now().UnixNano() / 1e3,
	})
	return rsp, nil
}
func (th *ImplementedTestServer) DelRequest(ctx context.Context, req *DelReq) (*DelRsp, error) {
	f := app.NewReplyFuture(context.WithValue(ctx, "hash", req.Header.Hash), req, &DelRsp{})
	th.app.GRpcHandle(f)
	if f.Error() != nil {
		return nil, f.Error()
	}
	return f.Response().(*DelRsp), nil
}
func (th *ImplementedTestServer) CrashRequest(ctx context.Context, req *CrashReq) (*CrashRsp, error) {
	f := app.NewReplyFuture(context.WithValue(ctx, "hash", req.Header.Hash), req, &CrashRsp{})
	th.app.GRpcHandle(f)
	if f.Error() != nil {
		return nil, f.Error()
	}
	return f.Response().(*CrashRsp), nil
}
