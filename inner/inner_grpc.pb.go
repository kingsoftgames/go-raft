// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftClient interface {
	// Sends a Join Request
	JoinRequest(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error)
	SynMember(ctx context.Context, in *SynMemberReq, opts ...grpc.CallOption) (*SynMemberRsp, error)
	TransHttpRequest(ctx context.Context, in *TransHttpReq, opts ...grpc.CallOption) (*TransHttpRsp, error)
	TransGrpcRequest(ctx context.Context, in *TransGrpcReq, opts ...grpc.CallOption) (*TransGrpcRsp, error)
	HealthRequest(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRsp, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) JoinRequest(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRsp, error) {
	out := new(JoinRsp)
	err := c.cc.Invoke(ctx, "/inner.Raft/JoinRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SynMember(ctx context.Context, in *SynMemberReq, opts ...grpc.CallOption) (*SynMemberRsp, error) {
	out := new(SynMemberRsp)
	err := c.cc.Invoke(ctx, "/inner.Raft/SynMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) TransHttpRequest(ctx context.Context, in *TransHttpReq, opts ...grpc.CallOption) (*TransHttpRsp, error) {
	out := new(TransHttpRsp)
	err := c.cc.Invoke(ctx, "/inner.Raft/TransHttpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) TransGrpcRequest(ctx context.Context, in *TransGrpcReq, opts ...grpc.CallOption) (*TransGrpcRsp, error) {
	out := new(TransGrpcRsp)
	err := c.cc.Invoke(ctx, "/inner.Raft/TransGrpcRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) HealthRequest(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRsp, error) {
	out := new(HealthRsp)
	err := c.cc.Invoke(ctx, "/inner.Raft/HealthRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
// All implementations must embed UnimplementedRaftServer
// for forward compatibility
type RaftServer interface {
	// Sends a Join Request
	JoinRequest(context.Context, *JoinReq) (*JoinRsp, error)
	SynMember(context.Context, *SynMemberReq) (*SynMemberRsp, error)
	TransHttpRequest(context.Context, *TransHttpReq) (*TransHttpRsp, error)
	TransGrpcRequest(context.Context, *TransGrpcReq) (*TransGrpcRsp, error)
	HealthRequest(context.Context, *HealthReq) (*HealthRsp, error)
	mustEmbedUnimplementedRaftServer()
}

// UnimplementedRaftServer must be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) JoinRequest(context.Context, *JoinReq) (*JoinRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRequest not implemented")
}
func (*UnimplementedRaftServer) SynMember(context.Context, *SynMemberReq) (*SynMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynMember not implemented")
}
func (*UnimplementedRaftServer) TransHttpRequest(context.Context, *TransHttpReq) (*TransHttpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransHttpRequest not implemented")
}
func (*UnimplementedRaftServer) TransGrpcRequest(context.Context, *TransGrpcReq) (*TransGrpcRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransGrpcRequest not implemented")
}
func (*UnimplementedRaftServer) HealthRequest(context.Context, *HealthReq) (*HealthRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthRequest not implemented")
}
func (*UnimplementedRaftServer) mustEmbedUnimplementedRaftServer() {}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_JoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).JoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.Raft/JoinRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).JoinRequest(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SynMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SynMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.Raft/SynMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SynMember(ctx, req.(*SynMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_TransHttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransHttpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).TransHttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.Raft/TransHttpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).TransHttpRequest(ctx, req.(*TransHttpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_TransGrpcRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransGrpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).TransGrpcRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.Raft/TransGrpcRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).TransGrpcRequest(ctx, req.(*TransGrpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_HealthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).HealthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inner.Raft/HealthRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).HealthRequest(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inner.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRequest",
			Handler:    _Raft_JoinRequest_Handler,
		},
		{
			MethodName: "SynMember",
			Handler:    _Raft_SynMember_Handler,
		},
		{
			MethodName: "TransHttpRequest",
			Handler:    _Raft_TransHttpRequest_Handler,
		},
		{
			MethodName: "TransGrpcRequest",
			Handler:    _Raft_TransGrpcRequest_Handler,
		},
		{
			MethodName: "HealthRequest",
			Handler:    _Raft_HealthRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner.proto",
}
