package main

import (
	"flag"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage = protogen.GoImportPath("context")
	appPackage     = protogen.GoImportPath("git.shiyou.kingsoft.com/infra/go-raft/app")
)

// generateFile generates a _grpc_implement.pb.go file containing gRPC service implement.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc_implement.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-ppx. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(file, g)
	return g
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genService(g, service)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	// Server interface.
	serverType := service.GoName + "Server"
	g.QualifiedGoIdent(appPackage.Ident("IApp"))

	// Server Implemented struct for forward compatibility.
	g.P("// Implemented", serverType, "  with app.")
	g.P("type Implemented", serverType, " struct {")
	g.P("Unimplemented" + serverType)
	g.P("app app.IApp")
	g.P("}")
	g.P()
	g.P("func NewImplemented" + serverType + "(app app.IApp) " + serverType + " {")
	g.P("return &Implemented" + serverType + "{app: app}")
	g.P("}")
	g.P()
	for _, method := range service.Methods {
		g.P("func (th *Implemented", serverType, ") ", implementServerSignature(g, method), "{")
		ctx := "ctx"
		for i := 0; i < len(method.Input.Fields); i++ {
			if method.Input.Fields[i].GoName == "Header" {
				ctx = "context.WithValue(context.WithValue(ctx, \"hash\", req.Header.Hash), \"readOnly\", req.Header.ReadOnly)"
				break
			}
		}
		g.P("f := app.NewReplyFuture(" + ctx + ", req, &" + g.QualifiedGoIdent(method.Output.GoIdent) + "{})")
		g.P("th.app.GRpcHandle(f)")
		g.P("if f.Error() != nil {")
		g.P("return nil, f.Error()")
		g.P("}")
		g.P("return f.Response().(*" + g.QualifiedGoIdent(method.Output.GoIdent) + "), nil")
		g.P("}")
	}
	g.P()
}

func implementServerSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "ctx "+g.QualifiedGoIdent(contextPackage.Ident("Context")))
		ret = "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	}
	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "req *"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, method.Parent.GoName+"_"+method.GoName+"Server")
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}

func main() {
	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}
